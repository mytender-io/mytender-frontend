import { useEffect, useState } from "react";

interface LoadingSpinnerProps {
  width?: number;
  height?: number;
}

const LoadingSpinner = ({ width = 51, height = 52 }: LoadingSpinnerProps) => {
  const [visibleParts, setVisibleParts] = useState([0, 1, 2, 3, 4, 5, 6, 7]);

  useEffect(() => {
    let currentIdx = 0;

    const interval = setInterval(() => {
      setVisibleParts((prev) => {
        const newParts = [...prev];
        // Remove current index (make part invisible)
        const indexToRemove = newParts.indexOf(currentIdx);
        if (indexToRemove !== -1) {
          newParts.splice(indexToRemove, 1);
        }

        // If all parts are hidden, show all again
        if (newParts.length === 0) {
          return [0, 1, 2, 3, 4, 5, 6, 7];
        }

        return newParts;
      });

      // Move to next segment in clockwise direction
      currentIdx = (currentIdx + 1) % 8;
    }, 150);

    return () => clearInterval(interval);
  }, []);

  // Define paths in clockwise order - starting from top (12 o'clock position)
  const paths = [
    // top (0)
    "M23.4639 5.24049C23.4639 4.68992 23.6784 4.16189 24.0602 3.77258C24.442 3.38326 24.9599 3.16455 25.4999 3.16455C26.0399 3.16455 26.5577 3.38326 26.9396 3.77258C27.3214 4.16189 27.5359 4.68992 27.5359 5.24049V11.4683C27.5359 12.0189 27.3214 12.5469 26.9396 12.9362C26.5577 13.3255 26.0399 13.5442 25.4999 13.5442C24.9599 13.5442 24.442 13.3255 24.0602 12.9362C23.6784 12.5469 23.4639 12.0189 23.4639 11.4683V5.24049Z",
    // top right (1)
    "M34.0884 17.1522C33.8988 16.9594 33.7484 16.7303 33.6457 16.4781C33.5431 16.2259 33.4902 15.9555 33.4902 15.6824C33.4902 15.4094 33.5431 15.139 33.6457 14.8868C33.7484 14.6346 33.8988 14.4055 34.0884 14.2127L38.4027 9.80753C38.785 9.41772 39.3035 9.19873 39.8442 9.19873C40.3849 9.19873 40.9034 9.41772 41.2857 9.80753C41.668 10.1973 41.8828 10.726 41.8828 11.2773C41.8828 11.8286 41.668 12.3572 41.2857 12.7471L36.9673 17.1522C36.5855 17.5414 36.0677 17.76 35.5279 17.76C34.988 17.76 34.4702 17.5414 34.0884 17.1522Z",
    // right (2)
    "M37.7158 25.9998C37.7158 25.4492 37.9303 24.9212 38.3122 24.5319C38.694 24.1425 39.2118 23.9238 39.7518 23.9238H45.8599C46.3999 23.9238 46.9177 24.1425 47.2996 24.5319C47.6814 24.9212 47.8959 25.4492 47.8959 25.9998C47.8959 26.5503 47.6814 27.0784 47.2996 27.4677C46.9177 27.857 46.3999 28.0757 45.8599 28.0757H39.7518C39.2118 28.0757 38.694 27.857 38.3122 27.4677C37.9303 27.0784 37.7158 26.5503 37.7158 25.9998Z",
    // bottom right (3)
    "M34.4584 37.9863C34.0761 37.5965 33.8613 37.0678 33.8613 36.5165C33.8613 35.9653 34.0761 35.4366 34.4584 35.0468C34.8407 34.657 35.3592 34.438 35.8999 34.438C36.4406 34.438 36.9591 34.657 37.3414 35.0468L41.6618 39.4478C42.0458 39.8362 42.2626 40.3642 42.2647 40.9157C42.2668 41.4672 42.054 41.9969 41.673 42.3883C41.2921 42.7798 40.7742 43.0009 40.2333 43.0031C39.6925 43.0052 39.173 42.7882 38.789 42.3998L34.4584 37.9863Z",
    // bottom (4)
    "M23.4639 40.5315C23.4639 39.9809 23.6784 39.4529 24.0602 39.0636C24.442 38.6743 24.9599 38.4556 25.4999 38.4556C26.0399 38.4556 26.5577 38.6743 26.9396 39.0636C27.3214 39.4529 27.5359 39.9809 27.5359 40.5315V46.7593C27.5359 47.3099 27.3214 47.8379 26.9396 48.2272C26.5577 48.6165 26.0399 48.8353 25.4999 48.8353C24.9599 48.8353 24.442 48.6165 24.0602 48.2272C23.6784 47.8379 23.4639 47.3099 23.4639 46.7593V40.5315Z",
    // bottom left (5)
    "M9.47409 42.3004C9.28479 42.1076 9.13461 41.8786 9.03215 41.6266C8.92969 41.3746 8.87695 41.1045 8.87695 40.8317C8.87695 40.5588 8.92969 40.2887 9.03215 40.0367C9.13461 39.7847 9.28479 39.5557 9.47409 39.3629L13.7904 34.9578C14.1722 34.5683 14.6901 34.3493 15.2302 34.3491C15.7703 34.3489 16.2883 34.5675 16.6704 34.9568C17.0524 35.346 17.2672 35.8741 17.2674 36.4247C17.2675 36.9754 17.0532 37.5036 16.6714 37.8932L12.353 42.2983C11.9715 42.6878 11.4539 42.9068 10.914 42.9072C10.3741 42.9075 9.85617 42.6893 9.47409 42.3004Z",
    // left (6)
    "M3.10352 25.9998C3.10352 25.4492 3.31802 24.9212 3.69985 24.5319C4.08168 24.1425 4.59955 23.9238 5.13953 23.9238H11.2476C11.7876 23.9238 12.3054 24.1425 12.6873 24.5319C13.0691 24.9212 13.2836 25.4492 13.2836 25.9998C13.2836 26.5503 13.0691 27.0784 12.6873 27.4677C12.3054 27.857 11.7876 28.0757 11.2476 28.0757H5.13953C4.59955 28.0757 4.08168 27.857 3.69985 27.4677C3.31802 27.0784 3.10352 26.5503 3.10352 25.9998Z",
    // top left (7)
    "M9.98933 13.0314C9.80016 12.8381 9.65019 12.6088 9.54796 12.3564C9.44574 12.104 9.39327 11.8335 9.39356 11.5605C9.39413 11.009 9.60953 10.4804 9.99238 10.0909C10.3752 9.70132 10.8942 9.48282 11.435 9.4834C11.9759 9.48398 12.4944 9.70361 12.8764 10.094L17.1887 14.497C17.3833 14.6884 17.5385 14.9173 17.6454 15.1705C17.7523 15.4237 17.8086 15.6961 17.8112 15.9717C17.8137 16.2474 17.7624 16.5208 17.6602 16.776C17.558 17.0312 17.407 17.263 17.2159 17.4581C17.0249 17.6531 16.7977 17.8075 16.5476 17.912C16.2974 18.0166 16.0294 18.0693 15.759 18.0671C15.4887 18.0649 15.2215 18.0078 14.973 17.8992C14.7245 17.7906 14.4997 17.6326 14.3118 17.4345L9.98933 13.0314Z"
  ];

  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width={width}
      height={height}
      viewBox="0 0 51 52"
      fill="none"
    >
      <rect width="51" height="52" fill="white" />
      {visibleParts.map((idx) => (
        <path
          key={idx}
          d={paths[idx]}
          stroke="#FF8019"
          strokeWidth="1"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
      ))}
    </svg>
  );
};

export default LoadingSpinner;
